{"env_info": "sys.platform: linux\nPython: 3.8.16 (default, Jan 17 2023, 23:13:24) [GCC 11.2.0]\nCUDA available: True\nGPU 0: Tesla V100-SXM2-32GB\nCUDA_HOME: /data/apps/cuda/11.1\nNVCC: Cuda compilation tools, release 11.1, V11.1.105\nGCC: gcc (GCC) 7.3.0\nPyTorch: 1.10.1+cu111\nPyTorch compiling details: PyTorch built with:\n  - GCC 7.3\n  - C++ Version: 201402\n  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)\n  - OpenMP 201511 (a.k.a. OpenMP 4.5)\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: AVX512\n  - CUDA Runtime 11.1\n  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86\n  - CuDNN 8.0.5\n  - Magma 2.5.2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.1, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, \n\nTorchVision: 0.11.2+cu111\nOpenCV: 4.7.0\nMMCV: 1.7.0\nMMCV Compiler: GCC 7.3\nMMCV CUDA Compiler: 11.1\nMMDetection: 2.28.1+c14dd6c", "config": "checkpoint_config = dict(interval=1)\nlog_config = dict(interval=50, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = '/data/home/scv9034/run/checkpoints/yolov3_mobilenetv2_mstrain-416_300e_coco_20210718_010823-f68a07b3.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=192)\nmodel = dict(\n    type='YOLOV3',\n    backbone=dict(\n        type='MobileNetV2',\n        out_indices=(2, 4, 6),\n        act_cfg=dict(type='LeakyReLU', negative_slope=0.1),\n        init_cfg=dict(\n            type='Pretrained', checkpoint='open-mmlab://mmdet/mobilenet_v2')),\n    neck=dict(\n        type='YOLOV3Neck',\n        num_scales=3,\n        in_channels=[320, 96, 32],\n        out_channels=[96, 96, 96]),\n    bbox_head=dict(\n        type='YOLOV3Head',\n        num_classes=20,\n        in_channels=[96, 96, 96],\n        out_channels=[96, 96, 96],\n        anchor_generator=dict(\n            type='YOLOAnchorGenerator',\n            base_sizes=[[(116, 90), (156, 198), (373, 326)],\n                        [(30, 61), (62, 45), (59, 119)],\n                        [(10, 13), (16, 30), (33, 23)]],\n            strides=[32, 16, 8]),\n        bbox_coder=dict(type='YOLOBBoxCoder'),\n        featmap_strides=[32, 16, 8],\n        loss_cls=dict(\n            type='CrossEntropyLoss',\n            use_sigmoid=True,\n            loss_weight=1.0,\n            reduction='sum'),\n        loss_conf=dict(\n            type='CrossEntropyLoss',\n            use_sigmoid=True,\n            loss_weight=1.0,\n            reduction='sum'),\n        loss_xy=dict(\n            type='CrossEntropyLoss',\n            use_sigmoid=True,\n            loss_weight=2.0,\n            reduction='sum'),\n        loss_wh=dict(type='MSELoss', loss_weight=2.0, reduction='sum')),\n    train_cfg=dict(\n        assigner=dict(\n            type='GridAssigner',\n            pos_iou_thr=0.5,\n            neg_iou_thr=0.5,\n            min_pos_iou=0)),\n    test_cfg=dict(\n        nms_pre=1000,\n        min_bbox_size=0,\n        score_thr=0.05,\n        conf_thr=0.005,\n        nms=dict(type='nms', iou_threshold=0.45),\n        max_per_img=100))\ndataset_type = 'CocoDataset'\ndata_root = 'data/coco/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True),\n    dict(\n        type='Expand',\n        mean=[123.675, 116.28, 103.53],\n        to_rgb=True,\n        ratio_range=(1, 2)),\n    dict(\n        type='MinIoURandomCrop',\n        min_ious=(0.4, 0.5, 0.6, 0.7, 0.8, 0.9),\n        min_crop_size=0.3),\n    dict(\n        type='Resize',\n        img_scale=[(320, 320), (416, 416)],\n        multiscale_mode='range',\n        keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(type='PhotoMetricDistortion'),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(416, 416),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=24,\n    workers_per_gpu=4,\n    train=dict(\n        type='RepeatDataset',\n        times=10,\n        dataset=dict(\n            type='CocoDataset',\n            ann_file='/data/home/scv9034/run/VOCtrainval/VOC_train.json',\n            img_prefix='/data/home/scv9034/run/VOCtrainval/VOC_train/',\n            pipeline=[\n                dict(type='LoadImageFromFile'),\n                dict(type='LoadAnnotations', with_bbox=True),\n                dict(\n                    type='Expand',\n                    mean=[123.675, 116.28, 103.53],\n                    to_rgb=True,\n                    ratio_range=(1, 2)),\n                dict(\n                    type='MinIoURandomCrop',\n                    min_ious=(0.4, 0.5, 0.6, 0.7, 0.8, 0.9),\n                    min_crop_size=0.3),\n                dict(\n                    type='Resize',\n                    img_scale=[(320, 320), (416, 416)],\n                    multiscale_mode='range',\n                    keep_ratio=True),\n                dict(type='RandomFlip', flip_ratio=0.5),\n                dict(type='PhotoMetricDistortion'),\n                dict(\n                    type='Normalize',\n                    mean=[123.675, 116.28, 103.53],\n                    std=[58.395, 57.12, 57.375],\n                    to_rgb=True),\n                dict(type='Pad', size_divisor=32),\n                dict(type='DefaultFormatBundle'),\n                dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels'])\n            ],\n            classes=('person', 'aeroplane', 'tvmonitor', 'cat', 'chair',\n                     'train', 'boat', 'dog', 'bird', 'bicycle', 'bottle',\n                     'sheep', 'diningtable', 'sofa', 'horse', 'motorbike',\n                     'cow', 'car', 'bus', 'pottedplant'))),\n    val=dict(\n        type='CocoDataset',\n        ann_file='/data/home/scv9034/run/VOCtrainval/VOC_val.json',\n        img_prefix='/data/home/scv9034/run/VOCtrainval/VOC_val/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(416, 416),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('person', 'aeroplane', 'tvmonitor', 'cat', 'chair', 'train',\n                 'boat', 'dog', 'bird', 'bicycle', 'bottle', 'sheep',\n                 'diningtable', 'sofa', 'horse', 'motorbike', 'cow', 'car',\n                 'bus', 'pottedplant')),\n    test=dict(\n        type='CocoDataset',\n        ann_file='/data/home/scv9034/run/VOCtrainval/VOC_val.json',\n        img_prefix='/data/home/scv9034/run/VOCtrainval/VOC_val/',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(416, 416),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='DefaultFormatBundle'),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ],\n        classes=('person', 'aeroplane', 'tvmonitor', 'cat', 'chair', 'train',\n                 'boat', 'dog', 'bird', 'bicycle', 'bottle', 'sheep',\n                 'diningtable', 'sofa', 'horse', 'motorbike', 'cow', 'car',\n                 'bus', 'pottedplant')))\noptimizer = dict(type='SGD', lr=0.003, momentum=0.9, weight_decay=0.0005)\noptimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=4000,\n    warmup_ratio=0.0001,\n    step=[24, 28])\nrunner = dict(type='EpochBasedRunner', max_epochs=30)\nevaluation = dict(interval=1, metric=['bbox'])\nfind_unused_parameters = True\nwork_dir = 'VOCdataset'\nauto_resume = False\ngpu_ids = [0]\n", "seed": 852965900, "exp_name": "yolov3_mobilenetv2_VOC.py"}
{"mode": "val", "epoch": 1, "iter": 66, "lr": 3e-05}
{"mode": "val", "epoch": 2, "iter": 66, "lr": 7e-05}
{"mode": "val", "epoch": 3, "iter": 66, "lr": 0.00011, "bbox_mAP": 0.0, "bbox_mAP_50": 0.0, "bbox_mAP_75": 0.0, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0, "bbox_mAP_l": 0.0, "bbox_mAP_copypaste": "0.0000 0.0000 0.0000 0.0000 0.0000 0.0000"}
{"mode": "val", "epoch": 4, "iter": 66, "lr": 0.00014, "bbox_mAP": 0.0009, "bbox_mAP_50": 0.0039, "bbox_mAP_75": 0.0001, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0103, "bbox_mAP_l": 0.0006, "bbox_mAP_copypaste": "0.0009 0.0039 0.0001 0.0000 0.0103 0.0006"}
{"mode": "val", "epoch": 5, "iter": 66, "lr": 0.00018, "bbox_mAP": 0.0029, "bbox_mAP_50": 0.0081, "bbox_mAP_75": 0.0015, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0159, "bbox_mAP_l": 0.0034, "bbox_mAP_copypaste": "0.0029 0.0081 0.0015 0.0000 0.0159 0.0034"}
{"mode": "val", "epoch": 6, "iter": 66, "lr": 0.00021, "bbox_mAP": 0.0098, "bbox_mAP_50": 0.0201, "bbox_mAP_75": 0.0079, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0217, "bbox_mAP_l": 0.015, "bbox_mAP_copypaste": "0.0098 0.0201 0.0079 0.0000 0.0217 0.0150"}
{"mode": "val", "epoch": 7, "iter": 66, "lr": 0.00025, "bbox_mAP": 0.011, "bbox_mAP_50": 0.0229, "bbox_mAP_75": 0.0094, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0205, "bbox_mAP_l": 0.017, "bbox_mAP_copypaste": "0.0110 0.0229 0.0094 0.0000 0.0205 0.0170"}
{"mode": "val", "epoch": 8, "iter": 66, "lr": 0.00028, "bbox_mAP": 0.0119, "bbox_mAP_50": 0.0258, "bbox_mAP_75": 0.0106, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0151, "bbox_mAP_l": 0.0233, "bbox_mAP_copypaste": "0.0119 0.0258 0.0106 0.0000 0.0151 0.0233"}
{"mode": "val", "epoch": 9, "iter": 66, "lr": 0.00032, "bbox_mAP": 0.0115, "bbox_mAP_50": 0.0263, "bbox_mAP_75": 0.0097, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0172, "bbox_mAP_l": 0.0208, "bbox_mAP_copypaste": "0.0115 0.0263 0.0097 0.0000 0.0172 0.0208"}
{"mode": "val", "epoch": 10, "iter": 66, "lr": 0.00035, "bbox_mAP": 0.0086, "bbox_mAP_50": 0.0233, "bbox_mAP_75": 0.0014, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.014, "bbox_mAP_l": 0.017, "bbox_mAP_copypaste": "0.0086 0.0233 0.0014 0.0000 0.0140 0.0170"}
{"mode": "val", "epoch": 11, "iter": 66, "lr": 0.00039, "bbox_mAP": 0.0084, "bbox_mAP_50": 0.0216, "bbox_mAP_75": 0.0035, "bbox_mAP_s": 0.001, "bbox_mAP_m": 0.0313, "bbox_mAP_l": 0.0175, "bbox_mAP_copypaste": "0.0084 0.0216 0.0035 0.0010 0.0313 0.0175"}
{"mode": "val", "epoch": 12, "iter": 66, "lr": 0.00042, "bbox_mAP": 0.0104, "bbox_mAP_50": 0.0222, "bbox_mAP_75": 0.0085, "bbox_mAP_s": 0.0007, "bbox_mAP_m": 0.024, "bbox_mAP_l": 0.0178, "bbox_mAP_copypaste": "0.0104 0.0222 0.0085 0.0007 0.0240 0.0178"}
{"mode": "val", "epoch": 13, "iter": 66, "lr": 0.00046, "bbox_mAP": 0.0097, "bbox_mAP_50": 0.0236, "bbox_mAP_75": 0.0024, "bbox_mAP_s": 0.0003, "bbox_mAP_m": 0.013, "bbox_mAP_l": 0.0206, "bbox_mAP_copypaste": "0.0097 0.0236 0.0024 0.0003 0.0130 0.0206"}
{"mode": "val", "epoch": 14, "iter": 66, "lr": 0.00049, "bbox_mAP": 0.0052, "bbox_mAP_50": 0.0131, "bbox_mAP_75": 0.0028, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0048, "bbox_mAP_l": 0.015, "bbox_mAP_copypaste": "0.0052 0.0131 0.0028 0.0000 0.0048 0.0150"}
{"mode": "val", "epoch": 15, "iter": 66, "lr": 0.00053, "bbox_mAP": 0.006, "bbox_mAP_50": 0.015, "bbox_mAP_75": 0.0032, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.004, "bbox_mAP_l": 0.0187, "bbox_mAP_copypaste": "0.0060 0.0150 0.0032 0.0000 0.0040 0.0187"}
{"mode": "val", "epoch": 16, "iter": 66, "lr": 0.00056, "bbox_mAP": 0.0061, "bbox_mAP_50": 0.0122, "bbox_mAP_75": 0.0058, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0019, "bbox_mAP_l": 0.0218, "bbox_mAP_copypaste": "0.0061 0.0122 0.0058 0.0000 0.0019 0.0218"}
{"mode": "val", "epoch": 17, "iter": 66, "lr": 0.0006, "bbox_mAP": 0.0057, "bbox_mAP_50": 0.012, "bbox_mAP_75": 0.0033, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0038, "bbox_mAP_l": 0.0168, "bbox_mAP_copypaste": "0.0057 0.0120 0.0033 0.0000 0.0038 0.0168"}
{"mode": "val", "epoch": 18, "iter": 66, "lr": 0.00063, "bbox_mAP": 0.0039, "bbox_mAP_50": 0.0082, "bbox_mAP_75": 0.0019, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0012, "bbox_mAP_l": 0.0097, "bbox_mAP_copypaste": "0.0039 0.0082 0.0019 0.0000 0.0012 0.0097"}
{"mode": "val", "epoch": 19, "iter": 66, "lr": 0.00067, "bbox_mAP": 0.006, "bbox_mAP_50": 0.011, "bbox_mAP_75": 0.0065, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0032, "bbox_mAP_l": 0.0149, "bbox_mAP_copypaste": "0.0060 0.0110 0.0065 0.0000 0.0032 0.0149"}
{"mode": "val", "epoch": 20, "iter": 66, "lr": 0.0007, "bbox_mAP": 0.003, "bbox_mAP_50": 0.0067, "bbox_mAP_75": 0.0025, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0, "bbox_mAP_l": 0.0068, "bbox_mAP_copypaste": "0.0030 0.0067 0.0025 0.0000 0.0000 0.0068"}
{"mode": "val", "epoch": 21, "iter": 66, "lr": 0.00074, "bbox_mAP": 0.0029, "bbox_mAP_50": 0.0066, "bbox_mAP_75": 0.0029, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0013, "bbox_mAP_l": 0.0103, "bbox_mAP_copypaste": "0.0029 0.0066 0.0029 0.0000 0.0013 0.0103"}
{"mode": "val", "epoch": 22, "iter": 66, "lr": 0.00077, "bbox_mAP": 0.0029, "bbox_mAP_50": 0.0054, "bbox_mAP_75": 0.0023, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0023, "bbox_mAP_l": 0.0064, "bbox_mAP_copypaste": "0.0029 0.0054 0.0023 0.0000 0.0023 0.0064"}
{"mode": "val", "epoch": 23, "iter": 66, "lr": 0.00081, "bbox_mAP": 0.0015, "bbox_mAP_50": 0.0026, "bbox_mAP_75": 0.0019, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0, "bbox_mAP_l": 0.0028, "bbox_mAP_copypaste": "0.0015 0.0026 0.0019 0.0000 0.0000 0.0028"}
{"mode": "val", "epoch": 24, "iter": 66, "lr": 0.00085, "bbox_mAP": 0.0017, "bbox_mAP_50": 0.007, "bbox_mAP_75": 0.0, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0, "bbox_mAP_l": 0.0046, "bbox_mAP_copypaste": "0.0017 0.0070 0.0000 0.0000 0.0000 0.0046"}
{"mode": "val", "epoch": 25, "iter": 66, "lr": 9e-05, "bbox_mAP": 0.0029, "bbox_mAP_50": 0.0065, "bbox_mAP_75": 0.0037, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0, "bbox_mAP_l": 0.0057, "bbox_mAP_copypaste": "0.0029 0.0065 0.0037 0.0000 0.0000 0.0057"}
{"mode": "val", "epoch": 26, "iter": 66, "lr": 9e-05, "bbox_mAP": 0.0032, "bbox_mAP_50": 0.0065, "bbox_mAP_75": 0.0037, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0, "bbox_mAP_l": 0.0053, "bbox_mAP_copypaste": "0.0032 0.0065 0.0037 0.0000 0.0000 0.0053"}
{"mode": "val", "epoch": 27, "iter": 66, "lr": 0.0001, "bbox_mAP": 0.0036, "bbox_mAP_50": 0.0066, "bbox_mAP_75": 0.0037, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0, "bbox_mAP_l": 0.0064, "bbox_mAP_copypaste": "0.0036 0.0066 0.0037 0.0000 0.0000 0.0064"}
{"mode": "val", "epoch": 28, "iter": 66, "lr": 0.0001, "bbox_mAP": 0.0035, "bbox_mAP_50": 0.0071, "bbox_mAP_75": 0.0037, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0, "bbox_mAP_l": 0.0072, "bbox_mAP_copypaste": "0.0035 0.0071 0.0037 0.0000 0.0000 0.0072"}
{"mode": "val", "epoch": 29, "iter": 66, "lr": 1e-05, "bbox_mAP": 0.0024, "bbox_mAP_50": 0.0054, "bbox_mAP_75": 0.0019, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0, "bbox_mAP_l": 0.0054, "bbox_mAP_copypaste": "0.0024 0.0054 0.0019 0.0000 0.0000 0.0054"}
{"mode": "val", "epoch": 30, "iter": 66, "lr": 1e-05, "bbox_mAP": 0.0028, "bbox_mAP_50": 0.0056, "bbox_mAP_75": 0.0025, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0, "bbox_mAP_l": 0.0054, "bbox_mAP_copypaste": "0.0028 0.0056 0.0025 0.0000 0.0000 0.0054"}
