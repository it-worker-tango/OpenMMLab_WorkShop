{"env_info": "sys.platform: darwin\nPython: 3.10.9 (main, Jan 11 2023, 09:18:20) [Clang 14.0.6 ]\nCUDA available: False\nGCC: Apple clang version 14.0.0 (clang-1400.0.29.202)\nPyTorch: 2.0.0.dev20230204\nPyTorch compiling details: PyTorch built with:\n  - GCC 4.2\n  - C++ Version: 201703\n  - clang 13.1.6\n  - Intel(R) oneAPI Math Kernel Library Version 2021.4-Product Build 20210904 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.7.3 (Git Hash 6dbeffbae1f23cbbeae17adb7b5b13f1f37c080e)\n  - OpenMP 201811\n  - LAPACK is enabled (usually provided by MKL)\n  - NNPACK is enabled\n  - CPU capability usage: NO AVX\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CXX_COMPILER=/Applications/Xcode_13.3.1.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -Wno-deprecated-declarations -DUSE_PTHREADPOOL -Xpreprocessor -fopenmp -I/Users/runner/work/_temp/anaconda/conda-bld/pytorch_1675498127817/_h_env_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_placehold_pl/include -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DLIBKINETO_NOROCTRACER -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DUSE_PYTORCH_METAL_EXPORT -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DUSE_COREML_DELEGATE -O2 -fPIC -Wall -Wextra -Werror=return-type -Werror=non-virtual-dtor -Werror=braced-scalar-init -Werror=range-loop-construct -Werror=bool-operation -Winconsistent-missing-override -Wnarrowing -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wunused-local-typedefs -Wno-unused-parameter -Wno-unused-function -Wno-unused-result -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wvla-extension -Wno-range-loop-analysis -Wno-pass-failed -Wsuggest-override -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -Wconstant-conversion -Wno-invalid-partial-specialization -Wno-typedef-redefinition -Wno-unused-private-field -Wno-inconsistent-missing-override -Wno-constexpr-not-const -Wno-missing-braces -Wunused-lambda-capture -Wunused-local-typedef -Qunused-arguments -fcolor-diagnostics -fdiagnostics-color=always -fno-math-errno -fno-trapping-math -Werror=format -Werror=cast-function-type -DUSE_MPS -fno-objc-arc -Wno-unguarded-availability-new -Wno-unused-private-field -Wno-missing-braces -Wno-constexpr-not-const, LAPACK_INFO=mkl, PERF_WITH_AVX512=1, TORCH_DISABLE_GPU_ASSERTS=OFF, TORCH_VERSION=2.0.0, USE_CUDA=0, USE_CUDNN=OFF, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=ON, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.15.0.dev20230204\nOpenCV: 4.7.0\nMMCV: 1.7.1\nMMCV Compiler: clang 13.1.6\nMMCV CUDA Compiler: not available\nMMDetection: 2.28.1+7c583f9", "config": "model = dict(\n    type='MaskRCNN',\n    backbone=dict(\n        type='ResNet',\n        depth=50,\n        num_stages=4,\n        out_indices=(0, 1, 2, 3),\n        frozen_stages=1,\n        norm_cfg=dict(type='BN', requires_grad=True),\n        norm_eval=True,\n        style='pytorch',\n        init_cfg=dict(type='Pretrained', checkpoint='torchvision://resnet50')),\n    neck=dict(\n        type='FPN',\n        in_channels=[256, 512, 1024, 2048],\n        out_channels=256,\n        num_outs=5),\n    rpn_head=dict(\n        type='RPNHead',\n        in_channels=256,\n        feat_channels=256,\n        anchor_generator=dict(\n            type='AnchorGenerator',\n            scales=[8],\n            ratios=[0.5, 1.0, 2.0],\n            strides=[4, 8, 16, 32, 64]),\n        bbox_coder=dict(\n            type='DeltaXYWHBBoxCoder',\n            target_means=[0.0, 0.0, 0.0, 0.0],\n            target_stds=[1.0, 1.0, 1.0, 1.0]),\n        loss_cls=dict(\n            type='CrossEntropyLoss', use_sigmoid=True, loss_weight=1.0),\n        loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n    roi_head=dict(\n        type='StandardRoIHead',\n        bbox_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=7, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        bbox_head=dict(\n            type='Shared2FCBBoxHead',\n            in_channels=256,\n            fc_out_channels=1024,\n            roi_feat_size=7,\n            num_classes=1,\n            bbox_coder=dict(\n                type='DeltaXYWHBBoxCoder',\n                target_means=[0.0, 0.0, 0.0, 0.0],\n                target_stds=[0.1, 0.1, 0.2, 0.2]),\n            reg_class_agnostic=False,\n            loss_cls=dict(\n                type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0),\n            loss_bbox=dict(type='L1Loss', loss_weight=1.0)),\n        mask_roi_extractor=dict(\n            type='SingleRoIExtractor',\n            roi_layer=dict(type='RoIAlign', output_size=14, sampling_ratio=0),\n            out_channels=256,\n            featmap_strides=[4, 8, 16, 32]),\n        mask_head=dict(\n            type='FCNMaskHead',\n            num_convs=4,\n            in_channels=256,\n            conv_out_channels=256,\n            num_classes=1,\n            loss_mask=dict(\n                type='CrossEntropyLoss', use_mask=True, loss_weight=1.0))),\n    train_cfg=dict(\n        rpn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.7,\n                neg_iou_thr=0.3,\n                min_pos_iou=0.3,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=256,\n                pos_fraction=0.5,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=False),\n            allowed_border=-1,\n            pos_weight=-1,\n            debug=False),\n        rpn_proposal=dict(\n            nms_pre=2000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            assigner=dict(\n                type='MaxIoUAssigner',\n                pos_iou_thr=0.5,\n                neg_iou_thr=0.5,\n                min_pos_iou=0.5,\n                match_low_quality=True,\n                ignore_iof_thr=-1),\n            sampler=dict(\n                type='RandomSampler',\n                num=512,\n                pos_fraction=0.25,\n                neg_pos_ub=-1,\n                add_gt_as_proposals=True),\n            mask_size=28,\n            pos_weight=-1,\n            debug=False)),\n    test_cfg=dict(\n        rpn=dict(\n            nms_pre=1000,\n            max_per_img=1000,\n            nms=dict(type='nms', iou_threshold=0.7),\n            min_bbox_size=0),\n        rcnn=dict(\n            score_thr=0.05,\n            nms=dict(type='nms', iou_threshold=0.5),\n            max_per_img=100,\n            mask_thr_binary=0.5)))\ndataset_type = 'CocoDataset'\ndata_root = 'data/balloon/'\nimg_norm_cfg = dict(\n    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)\ntrain_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n    dict(type='RandomFlip', flip_ratio=0.5),\n    dict(\n        type='Normalize',\n        mean=[123.675, 116.28, 103.53],\n        std=[58.395, 57.12, 57.375],\n        to_rgb=True),\n    dict(type='Pad', size_divisor=32),\n    dict(type='DefaultFormatBundle'),\n    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n]\ntest_pipeline = [\n    dict(type='LoadImageFromFile'),\n    dict(\n        type='MultiScaleFlipAug',\n        img_scale=(1333, 800),\n        flip=False,\n        transforms=[\n            dict(type='Resize', keep_ratio=True),\n            dict(type='RandomFlip'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ])\n]\ndata = dict(\n    samples_per_gpu=2,\n    workers_per_gpu=2,\n    train=dict(\n        type='CocoDataset',\n        ann_file='data/balloon/annotations/train/train.json',\n        img_prefix='data/balloon/train',\n        classes=('balloon', ),\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='LoadAnnotations', with_bbox=True, with_mask=True),\n            dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),\n            dict(type='RandomFlip', flip_ratio=0.5),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='Pad', size_divisor=32),\n            dict(type='DefaultFormatBundle'),\n            dict(\n                type='Collect',\n                keys=['img', 'gt_bboxes', 'gt_labels', 'gt_masks'])\n        ]),\n    val=dict(\n        type='CocoDataset',\n        ann_file='data/balloon/annotations/val/val.json',\n        img_prefix='data/balloon/val',\n        classes=('balloon', ),\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]),\n    test=dict(\n        type='CocoDataset',\n        ann_file='data/balloon/annotations/val/val.json',\n        img_prefix='data/balloon/val',\n        classes=('balloon', ),\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(\n                type='MultiScaleFlipAug',\n                img_scale=(1333, 800),\n                flip=False,\n                transforms=[\n                    dict(type='Resize', keep_ratio=True),\n                    dict(type='RandomFlip'),\n                    dict(\n                        type='Normalize',\n                        mean=[123.675, 116.28, 103.53],\n                        std=[58.395, 57.12, 57.375],\n                        to_rgb=True),\n                    dict(type='Pad', size_divisor=32),\n                    dict(type='ImageToTensor', keys=['img']),\n                    dict(type='Collect', keys=['img'])\n                ])\n        ]))\nevaluation = dict(metric=['bbox', 'segm'])\noptimizer = dict(type='SGD', lr=0.0025, momentum=0.9, weight_decay=0.0001)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(\n    policy='step',\n    warmup='linear',\n    warmup_iters=500,\n    warmup_ratio=0.001,\n    step=[16, 22])\nrunner = dict(type='EpochBasedRunner', max_epochs=10)\ncheckpoint_config = dict(interval=5)\nlog_config = dict(interval=10, hooks=[dict(type='TextLoggerHook')])\ncustom_hooks = [dict(type='NumClassCheckHook')]\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nload_from = 'mask_rcnn_r50_fpn_mstrain-poly_3x_coco_20210524_201154-21b550bb.pth'\nresume_from = None\nworkflow = [('train', 1)]\nopencv_num_threads = 0\nmp_start_method = 'fork'\nauto_scale_lr = dict(enable=False, base_batch_size=16)\nwork_dir = './work_dirs/balloon'\nauto_resume = False\ngpu_ids = range(0, 1)\n", "seed": 844041621, "exp_name": "balloon.py"}
{"mode": "train", "epoch": 1, "iter": 10, "lr": 5e-05, "data_time": 0.31464, "loss_rpn_cls": 0.05847, "loss_rpn_bbox": 0.01818, "loss_cls": 0.61556, "acc": 75.29297, "loss_bbox": 0.37789, "loss_mask": 7.36766, "loss": 8.43776, "time": 24.76583}
{"mode": "train", "epoch": 1, "iter": 20, "lr": 0.0001, "data_time": 0.01414, "loss_rpn_cls": 0.05325, "loss_rpn_bbox": 0.01098, "loss_cls": 0.4726, "acc": 92.46094, "loss_bbox": 0.23888, "loss_mask": 2.00393, "loss": 2.77964, "time": 23.6731}
{"mode": "train", "epoch": 1, "iter": 30, "lr": 0.00015, "data_time": 0.01553, "loss_rpn_cls": 0.06164, "loss_rpn_bbox": 0.01935, "loss_cls": 0.33054, "acc": 91.875, "loss_bbox": 0.29325, "loss_mask": 0.30195, "loss": 1.00673, "time": 22.83692}
{"mode": "val", "epoch": 1, "iter": 13, "lr": 0.00015, "bbox_mAP": 0.0401, "bbox_mAP_50": 0.0658, "bbox_mAP_75": 0.0381, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.0209, "bbox_mAP_l": 0.0549, "bbox_mAP_copypaste": "0.0401 0.0658 0.0381 0.0000 0.0209 0.0549", "segm_mAP": 0.0597, "segm_mAP_50": 0.0796, "segm_mAP_75": 0.066, "segm_mAP_s": 0.0027, "segm_mAP_m": 0.0173, "segm_mAP_l": 0.1687, "segm_mAP_copypaste": "0.0597 0.0796 0.0660 0.0027 0.0173 0.1687"}
{"mode": "train", "epoch": 2, "iter": 10, "lr": 0.0002, "data_time": 0.24478, "loss_rpn_cls": 0.04341, "loss_rpn_bbox": 0.01907, "loss_cls": 0.27421, "acc": 90.32227, "loss_bbox": 0.34605, "loss_mask": 0.25269, "loss": 0.93543, "time": 23.87524}
{"mode": "train", "epoch": 2, "iter": 20, "lr": 0.00025, "data_time": 0.01271, "loss_rpn_cls": 0.02193, "loss_rpn_bbox": 0.00959, "loss_cls": 0.20789, "acc": 92.76367, "loss_bbox": 0.27013, "loss_mask": 0.14437, "loss": 0.65391, "time": 22.42115}
{"mode": "train", "epoch": 2, "iter": 30, "lr": 0.0003, "data_time": 0.01716, "loss_rpn_cls": 0.0357, "loss_rpn_bbox": 0.01691, "loss_cls": 0.25903, "acc": 88.58398, "loss_bbox": 0.4088, "loss_mask": 0.1503, "loss": 0.87074, "time": 24.05295}
{"mode": "val", "epoch": 2, "iter": 13, "lr": 0.00031, "bbox_mAP": 0.4294, "bbox_mAP_50": 0.5601, "bbox_mAP_75": 0.5147, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.2546, "bbox_mAP_l": 0.5177, "bbox_mAP_copypaste": "0.4294 0.5601 0.5147 0.0000 0.2546 0.5177", "segm_mAP": 0.4971, "segm_mAP_50": 0.5597, "segm_mAP_75": 0.556, "segm_mAP_s": 0.0096, "segm_mAP_m": 0.1874, "segm_mAP_l": 0.6512, "segm_mAP_copypaste": "0.4971 0.5597 0.5560 0.0096 0.1874 0.6512"}
{"mode": "train", "epoch": 3, "iter": 10, "lr": 0.00036, "data_time": 0.23842, "loss_rpn_cls": 0.01934, "loss_rpn_bbox": 0.01142, "loss_cls": 0.20105, "acc": 89.74609, "loss_bbox": 0.371, "loss_mask": 0.12859, "loss": 0.7314, "time": 24.37721}
{"mode": "train", "epoch": 3, "iter": 20, "lr": 0.00041, "data_time": 0.01454, "loss_rpn_cls": 0.02219, "loss_rpn_bbox": 0.00987, "loss_cls": 0.1828, "acc": 90.3125, "loss_bbox": 0.34929, "loss_mask": 0.09227, "loss": 0.65641, "time": 23.14556}
{"mode": "train", "epoch": 3, "iter": 30, "lr": 0.00046, "data_time": 0.0167, "loss_rpn_cls": 0.02626, "loss_rpn_bbox": 0.01451, "loss_cls": 0.17182, "acc": 91.20117, "loss_bbox": 0.34527, "loss_mask": 0.09528, "loss": 0.65314, "time": 23.27158}
{"mode": "val", "epoch": 3, "iter": 13, "lr": 0.00046, "bbox_mAP": 0.6334, "bbox_mAP_50": 0.7913, "bbox_mAP_75": 0.7034, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.5668, "bbox_mAP_l": 0.7169, "bbox_mAP_copypaste": "0.6334 0.7913 0.7034 0.0000 0.5668 0.7169", "segm_mAP": 0.723, "segm_mAP_50": 0.7868, "segm_mAP_75": 0.7855, "segm_mAP_s": 0.0281, "segm_mAP_m": 0.6063, "segm_mAP_l": 0.8135, "segm_mAP_copypaste": "0.7230 0.7868 0.7855 0.0281 0.6063 0.8135"}
{"mode": "train", "epoch": 4, "iter": 10, "lr": 0.00051, "data_time": 0.24025, "loss_rpn_cls": 0.01364, "loss_rpn_bbox": 0.00968, "loss_cls": 0.1331, "acc": 94.27734, "loss_bbox": 0.31655, "loss_mask": 0.08782, "loss": 0.56079, "time": 23.61941}
{"mode": "train", "epoch": 4, "iter": 20, "lr": 0.00056, "data_time": 0.01732, "loss_rpn_cls": 0.01485, "loss_rpn_bbox": 0.01368, "loss_cls": 0.14256, "acc": 95.25391, "loss_bbox": 0.36903, "loss_mask": 0.08797, "loss": 0.62809, "time": 23.46881}
{"mode": "train", "epoch": 4, "iter": 30, "lr": 0.00061, "data_time": 0.0155, "loss_rpn_cls": 0.01514, "loss_rpn_bbox": 0.01135, "loss_cls": 0.11637, "acc": 96.58203, "loss_bbox": 0.28816, "loss_mask": 0.13359, "loss": 0.56462, "time": 23.3163}
{"mode": "val", "epoch": 4, "iter": 13, "lr": 0.00062, "bbox_mAP": 0.702, "bbox_mAP_50": 0.8621, "bbox_mAP_75": 0.8102, "bbox_mAP_s": 0.0168, "bbox_mAP_m": 0.6701, "bbox_mAP_l": 0.7547, "bbox_mAP_copypaste": "0.7020 0.8621 0.8102 0.0168 0.6701 0.7547", "segm_mAP": 0.7744, "segm_mAP_50": 0.8531, "segm_mAP_75": 0.8515, "segm_mAP_s": 0.0252, "segm_mAP_m": 0.6967, "segm_mAP_l": 0.8329, "segm_mAP_copypaste": "0.7744 0.8531 0.8515 0.0252 0.6967 0.8329"}
{"mode": "train", "epoch": 5, "iter": 10, "lr": 0.00067, "data_time": 0.24254, "loss_rpn_cls": 0.01092, "loss_rpn_bbox": 0.01062, "loss_cls": 0.10301, "acc": 96.69922, "loss_bbox": 0.2701, "loss_mask": 0.11209, "loss": 0.50674, "time": 24.33132}
{"mode": "train", "epoch": 5, "iter": 20, "lr": 0.00072, "data_time": 0.01506, "loss_rpn_cls": 0.00799, "loss_rpn_bbox": 0.01231, "loss_cls": 0.08158, "acc": 97.08984, "loss_bbox": 0.15504, "loss_mask": 0.11716, "loss": 0.37408, "time": 23.36082}
{"mode": "train", "epoch": 5, "iter": 30, "lr": 0.00077, "data_time": 0.01503, "loss_rpn_cls": 0.0097, "loss_rpn_bbox": 0.00961, "loss_cls": 0.06898, "acc": 97.58789, "loss_bbox": 0.10311, "loss_mask": 0.07356, "loss": 0.26496, "time": 23.34513}
{"mode": "val", "epoch": 5, "iter": 13, "lr": 0.00077, "bbox_mAP": 0.7262, "bbox_mAP_50": 0.8887, "bbox_mAP_75": 0.8409, "bbox_mAP_s": 0.202, "bbox_mAP_m": 0.6438, "bbox_mAP_l": 0.7891, "bbox_mAP_copypaste": "0.7262 0.8887 0.8409 0.2020 0.6438 0.7891", "segm_mAP": 0.7889, "segm_mAP_50": 0.8712, "segm_mAP_75": 0.8652, "segm_mAP_s": 0.0289, "segm_mAP_m": 0.6724, "segm_mAP_l": 0.8544, "segm_mAP_copypaste": "0.7889 0.8712 0.8652 0.0289 0.6724 0.8544"}
{"mode": "train", "epoch": 6, "iter": 10, "lr": 0.00082, "data_time": 0.24301, "loss_rpn_cls": 0.00767, "loss_rpn_bbox": 0.00658, "loss_cls": 0.06161, "acc": 97.74414, "loss_bbox": 0.09972, "loss_mask": 0.08389, "loss": 0.25947, "time": 23.80403}
{"mode": "train", "epoch": 6, "iter": 20, "lr": 0.00087, "data_time": 0.01489, "loss_rpn_cls": 0.00473, "loss_rpn_bbox": 0.00892, "loss_cls": 0.07919, "acc": 96.93359, "loss_bbox": 0.11578, "loss_mask": 0.1, "loss": 0.30862, "time": 23.50056}
{"mode": "train", "epoch": 6, "iter": 30, "lr": 0.00092, "data_time": 0.01649, "loss_rpn_cls": 0.01274, "loss_rpn_bbox": 0.01348, "loss_cls": 0.07113, "acc": 97.40234, "loss_bbox": 0.10247, "loss_mask": 0.08522, "loss": 0.28504, "time": 24.04791}
{"mode": "val", "epoch": 6, "iter": 13, "lr": 0.00093, "bbox_mAP": 0.7801, "bbox_mAP_50": 0.9075, "bbox_mAP_75": 0.8808, "bbox_mAP_s": 0.1262, "bbox_mAP_m": 0.6803, "bbox_mAP_l": 0.842, "bbox_mAP_copypaste": "0.7801 0.9075 0.8808 0.1262 0.6803 0.8420", "segm_mAP": 0.8231, "segm_mAP_50": 0.8856, "segm_mAP_75": 0.8824, "segm_mAP_s": 0.0224, "segm_mAP_m": 0.709, "segm_mAP_l": 0.8863, "segm_mAP_copypaste": "0.8231 0.8856 0.8824 0.0224 0.7090 0.8863"}
{"mode": "train", "epoch": 7, "iter": 10, "lr": 0.00098, "data_time": 0.23814, "loss_rpn_cls": 0.00557, "loss_rpn_bbox": 0.01049, "loss_cls": 0.0605, "acc": 97.67578, "loss_bbox": 0.08491, "loss_mask": 0.07764, "loss": 0.23911, "time": 23.48751}
{"mode": "train", "epoch": 7, "iter": 20, "lr": 0.00103, "data_time": 0.01696, "loss_rpn_cls": 0.00776, "loss_rpn_bbox": 0.00869, "loss_cls": 0.05967, "acc": 97.98828, "loss_bbox": 0.08284, "loss_mask": 0.07706, "loss": 0.23601, "time": 23.1554}
{"mode": "train", "epoch": 7, "iter": 30, "lr": 0.00108, "data_time": 0.01991, "loss_rpn_cls": 0.00683, "loss_rpn_bbox": 0.00858, "loss_cls": 0.06835, "acc": 97.63672, "loss_bbox": 0.10224, "loss_mask": 0.07777, "loss": 0.26377, "time": 24.11363}
{"mode": "val", "epoch": 7, "iter": 13, "lr": 0.00108, "bbox_mAP": 0.7892, "bbox_mAP_50": 0.8983, "bbox_mAP_75": 0.87, "bbox_mAP_s": 0.1262, "bbox_mAP_m": 0.7015, "bbox_mAP_l": 0.8537, "bbox_mAP_copypaste": "0.7892 0.8983 0.8700 0.1262 0.7015 0.8537", "segm_mAP": 0.8122, "segm_mAP_50": 0.881, "segm_mAP_75": 0.8747, "segm_mAP_s": 0.0168, "segm_mAP_m": 0.6832, "segm_mAP_l": 0.8776, "segm_mAP_copypaste": "0.8122 0.8810 0.8747 0.0168 0.6832 0.8776"}
{"mode": "train", "epoch": 8, "iter": 10, "lr": 0.00113, "data_time": 0.24104, "loss_rpn_cls": 0.00632, "loss_rpn_bbox": 0.00822, "loss_cls": 0.06318, "acc": 97.75391, "loss_bbox": 0.07714, "loss_mask": 0.07556, "loss": 0.23042, "time": 24.20227}
{"mode": "train", "epoch": 8, "iter": 20, "lr": 0.00118, "data_time": 0.01972, "loss_rpn_cls": 0.00774, "loss_rpn_bbox": 0.01263, "loss_cls": 0.06374, "acc": 97.90039, "loss_bbox": 0.0832, "loss_mask": 0.08161, "loss": 0.24892, "time": 23.60367}
{"mode": "train", "epoch": 8, "iter": 30, "lr": 0.00123, "data_time": 0.01122, "loss_rpn_cls": 0.0036, "loss_rpn_bbox": 0.00723, "loss_cls": 0.04735, "acc": 98.23242, "loss_bbox": 0.0704, "loss_mask": 0.06942, "loss": 0.19802, "time": 23.24066}
{"mode": "val", "epoch": 8, "iter": 13, "lr": 0.00124, "bbox_mAP": 0.7728, "bbox_mAP_50": 0.8918, "bbox_mAP_75": 0.8682, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.6599, "bbox_mAP_l": 0.8429, "bbox_mAP_copypaste": "0.7728 0.8918 0.8682 0.0000 0.6599 0.8429", "segm_mAP": 0.807, "segm_mAP_50": 0.8711, "segm_mAP_75": 0.8711, "segm_mAP_s": 0.0, "segm_mAP_m": 0.6741, "segm_mAP_l": 0.8742, "segm_mAP_copypaste": "0.8070 0.8711 0.8711 0.0000 0.6741 0.8742"}
{"mode": "train", "epoch": 9, "iter": 10, "lr": 0.00129, "data_time": 0.25012, "loss_rpn_cls": 0.00307, "loss_rpn_bbox": 0.00598, "loss_cls": 0.04327, "acc": 98.44727, "loss_bbox": 0.06543, "loss_mask": 0.0615, "loss": 0.17924, "time": 23.81778}
{"mode": "train", "epoch": 9, "iter": 20, "lr": 0.00134, "data_time": 0.01311, "loss_rpn_cls": 0.00457, "loss_rpn_bbox": 0.00538, "loss_cls": 0.03833, "acc": 98.62305, "loss_bbox": 0.06156, "loss_mask": 0.06197, "loss": 0.17182, "time": 22.88697}
{"mode": "train", "epoch": 9, "iter": 30, "lr": 0.00139, "data_time": 0.01871, "loss_rpn_cls": 0.00228, "loss_rpn_bbox": 0.01303, "loss_cls": 0.06979, "acc": 97.39258, "loss_bbox": 0.08872, "loss_mask": 0.08187, "loss": 0.2557, "time": 24.17228}
{"mode": "val", "epoch": 9, "iter": 13, "lr": 0.00139, "bbox_mAP": 0.7647, "bbox_mAP_50": 0.8967, "bbox_mAP_75": 0.8534, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.6885, "bbox_mAP_l": 0.8265, "bbox_mAP_copypaste": "0.7647 0.8967 0.8534 0.0000 0.6885 0.8265", "segm_mAP": 0.8101, "segm_mAP_50": 0.8759, "segm_mAP_75": 0.8759, "segm_mAP_s": 0.0, "segm_mAP_m": 0.6987, "segm_mAP_l": 0.877, "segm_mAP_copypaste": "0.8101 0.8759 0.8759 0.0000 0.6987 0.8770"}
{"mode": "train", "epoch": 10, "iter": 10, "lr": 0.00144, "data_time": 0.2445, "loss_rpn_cls": 0.00264, "loss_rpn_bbox": 0.0081, "loss_cls": 0.03966, "acc": 98.53516, "loss_bbox": 0.05999, "loss_mask": 0.05938, "loss": 0.16977, "time": 23.39166}
{"mode": "train", "epoch": 10, "iter": 20, "lr": 0.00149, "data_time": 0.01617, "loss_rpn_cls": 0.00277, "loss_rpn_bbox": 0.00912, "loss_cls": 0.05121, "acc": 98.24219, "loss_bbox": 0.08773, "loss_mask": 0.07465, "loss": 0.22548, "time": 24.25025}
{"mode": "train", "epoch": 10, "iter": 30, "lr": 0.00154, "data_time": 0.01275, "loss_rpn_cls": 0.00278, "loss_rpn_bbox": 0.00819, "loss_cls": 0.04374, "acc": 98.27148, "loss_bbox": 0.05744, "loss_mask": 0.06428, "loss": 0.17642, "time": 22.12608}
{"mode": "val", "epoch": 10, "iter": 13, "lr": 0.00155, "bbox_mAP": 0.7419, "bbox_mAP_50": 0.8897, "bbox_mAP_75": 0.8482, "bbox_mAP_s": 0.0, "bbox_mAP_m": 0.6448, "bbox_mAP_l": 0.8083, "bbox_mAP_copypaste": "0.7419 0.8897 0.8482 0.0000 0.6448 0.8083", "segm_mAP": 0.7908, "segm_mAP_50": 0.8897, "segm_mAP_75": 0.8687, "segm_mAP_s": 0.0, "segm_mAP_m": 0.6563, "segm_mAP_l": 0.8622, "segm_mAP_copypaste": "0.7908 0.8897 0.8687 0.0000 0.6563 0.8622"}
