{"env_info": "sys.platform: win32\nPython: 3.10.9 | packaged by conda-forge | (main, Jan 11 2023, 15:15:40) [MSC v.1916 64 bit (AMD64)]\nCUDA available: False\nMSVC: \u7528\u4e8e x64 \u7684 Microsoft (R) C/C++ \u4f18\u5316\u7f16\u8bd1\u5668 19.34.31937 \u7248\nGCC: n/a\nPyTorch: 1.13.1\nPyTorch compiling details: PyTorch built with:\n  - C++ Version: 199711\n  - MSVC 192829337\n  - Intel(R) Math Kernel Library Version 2020.0.2 Product Build 20200624 for Intel(R) 64 architecture applications\n  - Intel(R) MKL-DNN v2.6.0 (Git Hash 52b5f107dd9cf10910aaa19cb47f3abf9b349815)\n  - OpenMP 2019\n  - LAPACK is enabled (usually provided by MKL)\n  - CPU capability usage: AVX2\n  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CXX_COMPILER=C:/cb/pytorch_1000000000000/work/tmp_bin/sccache-cl.exe, CXX_FLAGS=/DWIN32 /D_WINDOWS /GR /EHsc /w /bigobj -DUSE_PTHREADPOOL -openmp:experimental -IC:/cb/pytorch_1000000000000/work/mkl/include -DNDEBUG -DUSE_KINETO -DLIBKINETO_NOCUPTI -DUSE_FBGEMM -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.13.1, USE_CUDA=0, USE_CUDNN=OFF, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=OFF, USE_NNPACK=OFF, USE_OPENMP=ON, USE_ROCM=OFF, \n\nTorchVision: 0.14.1\nOpenCV: 4.7.0\nMMCV: 1.7.1\nMMCV Compiler: MSVC 192829924\nMMCV CUDA Compiler: not available\nMMClassification: 0.25.0+", "seed": 1504059428, "mmcls_version": "0.25.0", "config": "model = dict(\n    type='ImageClassifier',\n    backbone=dict(type='MobileNetV2', widen_factor=1.0),\n    neck=dict(type='GlobalAveragePooling'),\n    head=dict(\n        type='LinearClsHead',\n        num_classes=5,\n        in_channels=1280,\n        loss=dict(type='CrossEntropyLoss', loss_weight=1.0),\n        topk=(1, 5)))\nload_from = 'mobilenet_v2_batch256_imagenet_20200708-3b2dc3af.pth'\ndata = dict(\n    samples_per_gpu=32,\n    workers_per_gpu=2,\n    train=dict(\n        type='CustomDataset',\n        data_prefix='data\\train',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='RandomResizedCrop', size=224, backend='pillow'),\n            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='ToTensor', keys=['gt_label']),\n            dict(type='Collect', keys=['img', 'gt_label'])\n        ]),\n    val=dict(\n        type='CustomDataset',\n        data_prefix='data\\val',\n        ann_file='data\\val.txt',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='Resize', size=(256, -1), backend='pillow'),\n            dict(type='CenterCrop', crop_size=224),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ]),\n    test=dict(\n        type='CustomDataset',\n        data_prefix='data\\val',\n        ann_file='data\\val.txt',\n        pipeline=[\n            dict(type='LoadImageFromFile'),\n            dict(type='Resize', size=(256, -1), backend='pillow'),\n            dict(type='CenterCrop', crop_size=224),\n            dict(\n                type='Normalize',\n                mean=[123.675, 116.28, 103.53],\n                std=[58.395, 57.12, 57.375],\n                to_rgb=True),\n            dict(type='ImageToTensor', keys=['img']),\n            dict(type='Collect', keys=['img'])\n        ]))\nevaluation = dict(interval=1, metric='accuracy')\noptimizer = dict(type='SGD', lr=0.005, momentum=0.9, weight_decay=4e-05)\noptimizer_config = dict(grad_clip=None)\nlr_config = dict(policy='step', gamma=0.98, step=1)\nrunner = dict(type='EpochBasedRunner', max_epochs=5)\ncheckpoint_config = dict(interval=5)\nlog_config = dict(interval=10, hooks=[dict(type='TextLoggerHook')])\ndist_params = dict(backend='nccl')\nlog_level = 'INFO'\nresume_from = None\nworkflow = [('train', 1)]\nwork_dir = 'work-dir'\ngpu_ids = [0]\ndevice = 'cpu'\nseed = 1504059428\n", "CLASSES": ["daisy", "dandelion", "rose", "sunflower", "tulip"]}
{"mode": "train", "epoch": 1, "iter": 10, "lr": 0.005, "data_time": 1.09098, "loss": 1.25462, "time": 6.23859}
{"mode": "train", "epoch": 1, "iter": 20, "lr": 0.005, "data_time": 0.00668, "loss": 0.44844, "time": 4.69814}
{"mode": "train", "epoch": 1, "iter": 30, "lr": 0.005, "data_time": 0.00419, "loss": 0.37486, "time": 4.70851}
{"mode": "train", "epoch": 1, "iter": 40, "lr": 0.005, "data_time": 0.00419, "loss": 0.41323, "time": 4.69659}
{"mode": "train", "epoch": 1, "iter": 50, "lr": 0.005, "data_time": 0.00379, "loss": 0.48449, "time": 4.46396}
{"mode": "train", "epoch": 1, "iter": 60, "lr": 0.005, "data_time": 0.00389, "loss": 0.55312, "time": 4.85621}
{"mode": "train", "epoch": 1, "iter": 70, "lr": 0.005, "data_time": 0.00758, "loss": 0.51382, "time": 4.96628}
{"mode": "val", "epoch": 1, "iter": 18, "lr": 0.005, "accuracy_top-1": 83.39161, "accuracy_top-5": 100.0}
{"mode": "train", "epoch": 2, "iter": 10, "lr": 0.0049, "data_time": 0.22869, "loss": 0.58151, "time": 6.64742}
{"mode": "train", "epoch": 2, "iter": 20, "lr": 0.0049, "data_time": 0.01007, "loss": 0.6007, "time": 4.95555}
{"mode": "train", "epoch": 2, "iter": 30, "lr": 0.0049, "data_time": 0.00489, "loss": 0.61721, "time": 4.60868}
{"mode": "train", "epoch": 2, "iter": 40, "lr": 0.0049, "data_time": 0.00618, "loss": 0.55605, "time": 4.61257}
{"mode": "train", "epoch": 2, "iter": 50, "lr": 0.0049, "data_time": 0.00499, "loss": 0.42125, "time": 4.6802}
{"mode": "train", "epoch": 2, "iter": 60, "lr": 0.0049, "data_time": 0.00708, "loss": 0.39173, "time": 4.66594}
{"mode": "train", "epoch": 2, "iter": 70, "lr": 0.0049, "data_time": 0.00648, "loss": 0.38676, "time": 4.76705}
{"mode": "val", "epoch": 2, "iter": 18, "lr": 0.0049, "accuracy_top-1": 91.95805, "accuracy_top-5": 100.0}
{"mode": "train", "epoch": 3, "iter": 10, "lr": 0.0048, "data_time": 0.22091, "loss": 0.54114, "time": 4.60479}
{"mode": "train", "epoch": 3, "iter": 20, "lr": 0.0048, "data_time": 0.00658, "loss": 0.35398, "time": 4.57373}
{"mode": "train", "epoch": 3, "iter": 30, "lr": 0.0048, "data_time": 0.00548, "loss": 0.41205, "time": 4.41529}
{"mode": "train", "epoch": 3, "iter": 40, "lr": 0.0048, "data_time": 0.00399, "loss": 0.30918, "time": 4.66479}
{"mode": "train", "epoch": 3, "iter": 50, "lr": 0.0048, "data_time": 0.00638, "loss": 0.35156, "time": 4.57048}
{"mode": "train", "epoch": 3, "iter": 60, "lr": 0.0048, "data_time": 0.00389, "loss": 0.35905, "time": 4.49913}
{"mode": "train", "epoch": 3, "iter": 70, "lr": 0.0048, "data_time": 0.00509, "loss": 0.34881, "time": 5.13178}
{"mode": "val", "epoch": 3, "iter": 18, "lr": 0.0048, "accuracy_top-1": 93.007, "accuracy_top-5": 100.0}
{"mode": "train", "epoch": 4, "iter": 10, "lr": 0.00471, "data_time": 0.22151, "loss": 0.3799, "time": 5.3331}
{"mode": "train", "epoch": 4, "iter": 20, "lr": 0.00471, "data_time": 0.00538, "loss": 0.32104, "time": 4.79227}
{"mode": "train", "epoch": 4, "iter": 30, "lr": 0.00471, "data_time": 0.00499, "loss": 0.28342, "time": 4.43594}
{"mode": "train", "epoch": 4, "iter": 40, "lr": 0.00471, "data_time": 0.00658, "loss": 0.22133, "time": 4.51872}
{"mode": "train", "epoch": 4, "iter": 50, "lr": 0.00471, "data_time": 0.00534, "loss": 0.23464, "time": 4.36566}
{"mode": "train", "epoch": 4, "iter": 60, "lr": 0.00471, "data_time": 0.00529, "loss": 0.28432, "time": 4.88544}
{"mode": "train", "epoch": 4, "iter": 70, "lr": 0.00471, "data_time": 0.00578, "loss": 0.29784, "time": 5.64745}
{"mode": "val", "epoch": 4, "iter": 18, "lr": 0.00471, "accuracy_top-1": 92.83217, "accuracy_top-5": 100.0}
{"mode": "train", "epoch": 5, "iter": 10, "lr": 0.00461, "data_time": 0.2237, "loss": 0.23362, "time": 4.74676}
{"mode": "train", "epoch": 5, "iter": 20, "lr": 0.00461, "data_time": 0.00449, "loss": 0.30122, "time": 4.86718}
{"mode": "train", "epoch": 5, "iter": 30, "lr": 0.00461, "data_time": 0.00618, "loss": 0.18853, "time": 4.58213}
{"mode": "train", "epoch": 5, "iter": 40, "lr": 0.00461, "data_time": 0.00668, "loss": 0.24666, "time": 4.81353}
{"mode": "train", "epoch": 5, "iter": 50, "lr": 0.00461, "data_time": 0.00389, "loss": 0.17587, "time": 4.59836}
{"mode": "train", "epoch": 5, "iter": 60, "lr": 0.00461, "data_time": 0.00519, "loss": 0.25361, "time": 4.55961}
{"mode": "train", "epoch": 5, "iter": 70, "lr": 0.00461, "data_time": 0.00409, "loss": 0.24615, "time": 4.44322}
{"mode": "val", "epoch": 5, "iter": 18, "lr": 0.00461, "accuracy_top-1": 93.88112, "accuracy_top-5": 100.0}
